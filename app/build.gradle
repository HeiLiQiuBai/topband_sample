//noinspection GradleDynamicVersion
apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.ayst.sample"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode
        versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    signingConfigs {
        release {
            File strFile = new File(rootProject.ext.keyStorePath)
            storeFile file(strFile)
            keyAlias rootProject.ext.keyStoreAlias
            keyPassword rootProject.ext.keyStoreKeyPassword
            storePassword rootProject.ext.keyStorePassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.all {
                    def fileName = "Sample_${variant.buildType.name}_v${variant.versionName}_${releaseTime()}.apk"
                    outputFileName = fileName
                }
            }
        }

        debug {
            applicationIdSuffix ".BETA"
            versionNameSuffix "-BETA"
            minifyEnabled false
            shrinkResources false
            debuggable true
            testCoverageEnabled true
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.android.support:multidex:1.0.0'

    // butterknife
    implementation 'cn.trinea.android.common:trinea-android-common:4.2.15'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    // TimePicker
    implementation 'com.wdullaer:materialdatetimepicker:3.5.1'
}

preBuild {
    doLast {
        def imlFile = file(project.name + ".iml")
        println('Change ' + project.name + '.iml order')
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
            parsedXml.component[1].remove(jdkNode)
            def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
            new groovy.util.Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

updateVersion()

def updateVersion() {
    def propertiesFile = file('build.properties')
    Properties properties = readProperties(propertiesFile)

    def versionMajor = properties['version_major'].toString().toInteger()
    def versionMinor = properties['version_minor'].toString().toInteger()
    def versionPatch = properties['version_patch'].toString().toInteger()
    def versionBuild = properties['version_build'].toString().toInteger()
    def versionStore = properties['version_store'].toString().toInteger()

    if (isReleaseTask()) {
        System.out.println(">>> Building Release...")
        versionPatch++
        versionStore++
        versionBuild = 0
        properties['version_patch'] = versionPatch.toString()
        properties['version_store'] = versionStore.toString()
        properties['version_build'] = versionBuild.toString()
        writeProperties(propertiesFile, properties)
    }
    if (isCompileTask()) {
        System.out.println(">>> Compiling Source...")
        versionBuild++
        properties['version_build'] = versionBuild.toString()
        writeProperties(propertiesFile, properties)
    }

    def versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    def applicationId = android.defaultConfig.applicationId
    if (!isReleaseTask()) {
        versionName = versionName + ".${versionBuild}"
        applicationId = applicationId + android.buildTypes.debug.applicationIdSuffix
    }
    System.out.println(">>> " + project.parent.name + " " + versionName + " (" + versionStore + ") '" + applicationId + "'")
    android.defaultConfig.versionCode = versionStore
    android.defaultConfig.versionName = versionName
}

def isCompileTask() {
    def tasks = gradle.getStartParameter().getTaskNames()
    return ':app:generateDebugSources' in tasks || ':app:generateReleaseSources' in tasks ||
            'generateDebugSources' in tasks || 'generateReleaseSources' in tasks
}

def isReleaseTask() {
    def tasks = gradle.getStartParameter().getTaskNames()
    return ':app:assembleRelease' in tasks || 'assembleRelease' in tasks
}

static Properties readProperties(propertiesFile) {
    if (propertiesFile.canRead()) {
        Properties properties = new Properties()
        def inputStream = new FileInputStream(propertiesFile)
        properties.load(inputStream)
        inputStream.close()
        return properties
    } else {
        def message = ">>> Could not read " + propertiesFile.name + " file!"
        System.err.println(message)
        throw new GradleException(message)
    }
}

def static writeProperties(propertiesFile, properties) {
    def writer = propertiesFile.newWriter()
    properties.store(writer, "Build Properties")
    writer.close()
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '27.1.0'
            }
        }
    }
}

